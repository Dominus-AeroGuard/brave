import { Test } from '@nestjs/testing';
import {
  ApplicationDocumentRequest,
  CreateApplicationDocumentUseCase,
} from './create-application-document.use-case';
import { IApplicationDocumentRepository } from '../../../infra/prisma/repositories/application-document.repository';
import { AwsService } from '../../../infra/aws/aws.service';
import { ApplicationDocumentType } from '../../enums/application-document-type.enum';
import { Readable } from 'stream';
import { ApplicationDocumentService } from '../../services/application-document/application-document.service';
import { IApplicationAreaRepository } from '../../../infra/prisma/repositories/application-area.repository';
import { OcrService } from '../../../infra/http/ocr/ocr.service';

describe('CreateApplicationDocumentUseCase', () => {
  const filePath =
    'https://bucket.s3.process.env.region.amazonaws.com/key.file';

  let useCase: CreateApplicationDocumentUseCase;
  let applicationDocumentService: ApplicationDocumentService;
  let repository: IApplicationDocumentRepository;
  let arearepository: IApplicationAreaRepository;
  let ocrService: OcrService;
  let awsService: AwsService;

  beforeEach(async () => {
    const moduleRef = await Test.createTestingModule({
      providers: [
        CreateApplicationDocumentUseCase,
        ApplicationDocumentService,
        {
          provide: 'IApplicationDocumentRepository',
          useValue: {
            create: jest.fn(),
          },
        },
        {
          provide: 'IApplicationAreaRepository',
          useValue: {
            createMany: jest.fn(),
          },
        },
        {
          provide: AwsService,
          useValue: {
            uploadFile: jest.fn(),
            buildPath: jest.fn(),
          },
        },
        {
          provide: OcrService,
          useValue: {
            extractDocumentData: jest.fn(),
          },
        },
      ],
    }).compile();

    useCase = moduleRef.get<CreateApplicationDocumentUseCase>(
      CreateApplicationDocumentUseCase,
    );
    applicationDocumentService = moduleRef.get<ApplicationDocumentService>(
      ApplicationDocumentService,
    );
    repository = moduleRef.get<IApplicationDocumentRepository>(
      'IApplicationDocumentRepository',
    );
    arearepository = moduleRef.get<IApplicationAreaRepository>(
      'IApplicationAreaRepository',
    );
    awsService = moduleRef.get<AwsService>(AwsService);
    ocrService = moduleRef.get<OcrService>(OcrService);
  });

  describe('execute', () => {
    it('should create an application document and return it', async () => {
      // Arrange
      const files: Array<
        Partial<{ file: Express.Multer.File; typeId: number }>
      > = [
        {
          file: {
            fieldname: 'file',
            originalname: 'test-file.txt',
            encoding: '7bit',
            mimetype: 'text/plain',
            size: 1024,
            buffer: Buffer.from('Test file content'),
            stream: new Readable(),
            destination: '',
            filename: '',
            path: '',
          },
          typeId: ApplicationDocumentType.RA,
        },
      ];

      const request: ApplicationDocumentRequest = {
        files,
        applicationId: 123,
      };

      const ocrResponseMock = {
        receituario_agronomico: {
          nome_usuario: 'Nome Usuario',
          numero_receita: '123',
          endereco_cidade_propriedade: 'endereco_cidade_propriedade',
          cultura: 'cultura',
          data_emissao: 'data_emissao',
          nome_produto: 'nome_produto',
          dosagem: 'dosagem',
          modalidade_aplicacao: 'modalidade_aplicacao',
          formulacao: 'formulacao',
          area_aplicada: 'area_aplicada',
          classificacao_toxicologica: 'classificacao_toxicologica',
          nome_engenheiro: 'nome_engenheiro',
          assinatura: 'assinatura',
        },
      };

      const repositorySpy = {
        create: jest.spyOn(repository, 'create').mockResolvedValue({
          id: 1,
          path: filePath,
          originalName: 'test-file.txt',
          data: ocrResponseMock.receituario_agronomico,
          type: {
            id: ApplicationDocumentType.RA,
            description: 'RA',
            active: true,
          },
        }),
      };

      const ocrSpy = {
        extractDocumentData: jest
          .spyOn(ocrService, 'extractDocumentData')
          .mockResolvedValue(ocrResponseMock),
      };

      const awsServiceSpy = {
        uploadFile: jest.spyOn(awsService, 'uploadFile'),
        buildUrl: jest.spyOn(awsService, 'buildPath').mockReturnValue(filePath),
      };

      const applicationDocumentServiceSpy = {
        getBucketByDocumentType: jest
          .spyOn(applicationDocumentService, 'getBucketByDocumentType')
          .mockReturnValue('bucket'),
        generateFileName: jest
          .spyOn(applicationDocumentService, 'generateFileName')
          .mockReturnValue('key.file'),
      };

      // Act
      const result = await useCase.execute(request);

      // Assert
      expect(awsServiceSpy.buildUrl).toHaveBeenCalled();
      expect(awsServiceSpy.uploadFile).toHaveBeenCalled();
      expect(ocrSpy.extractDocumentData).toHaveBeenCalled();
      expect(
        applicationDocumentServiceSpy.getBucketByDocumentType,
      ).toHaveBeenCalledWith(ApplicationDocumentType.RA);
      expect(
        applicationDocumentServiceSpy.generateFileName,
      ).toHaveBeenCalledWith(files[0].file);
      expect(repositorySpy.create).toHaveBeenCalledWith({
        path: filePath,
        originalName: 'test-file.txt',
        applicationId: 123,
        typeId: ApplicationDocumentType.RA,
        data: Object.keys(ocrResponseMock.receituario_agronomico).map(
          (key) => ({
            key,
            value: ocrResponseMock.receituario_agronomico[key],
            created_by: 1,
          }),
        ),
      });
      expect(ocrSpy.extractDocumentData).toHaveBeenCalledWith({
        file: files[0].file,
        type: ApplicationDocumentType[ApplicationDocumentType.RA].toString(),
      });

      expect(result).toEqual([
        {
          id: 1,
          path: filePath,
          originalName: 'test-file.txt',
          data: ocrResponseMock.receituario_agronomico,
          type: {
            id: ApplicationDocumentType.RA,
            description: 'RA',
            active: true,
          },
        },
      ]);
    });

    it('should throw an error if the file is not provided', async () => {
      // Arrange
      const request: ApplicationDocumentRequest = {
        files: undefined,
        applicationId: 123,
      };

      // Act
      try {
        await useCase.execute(request);
      } catch (error) {
        // Assert
        expect(error).toBeInstanceOf(Error);
        expect(error.message).toBe('File is required');
      }
    });

    it('should create an application document with kml file and return it', async () => {
      // Arrange
      const u16 = new Uint8Array([
        60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34,
        49, 46, 48, 34, 32, 101, 110, 99, 111, 100, 105, 110, 103, 61, 34, 117,
        116, 102, 45, 56, 34, 32, 63, 62, 10, 60, 107, 109, 108, 32, 120, 109,
        108, 110, 115, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119,
        46, 111, 112, 101, 110, 103, 105, 115, 46, 110, 101, 116, 47, 107, 109,
        108, 47, 50, 46, 50, 34, 62, 10, 60, 68, 111, 99, 117, 109, 101, 110,
        116, 32, 105, 100, 61, 34, 114, 111, 111, 116, 95, 100, 111, 99, 34, 62,
        10, 60, 83, 99, 104, 101, 109, 97, 32, 110, 97, 109, 101, 61, 34, 116,
        101, 115, 116, 101, 49, 34, 32, 105, 100, 61, 34, 116, 101, 115, 116,
        101, 49, 34, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101,
        108, 100, 32, 110, 97, 109, 101, 61, 34, 116, 105, 109, 101, 115, 116,
        97, 109, 112, 34, 32, 116, 121, 112, 101, 61, 34, 115, 116, 114, 105,
        110, 103, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101,
        108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108,
        100, 32, 110, 97, 109, 101, 61, 34, 98, 101, 103, 105, 110, 34, 32, 116,
        121, 112, 101, 61, 34, 115, 116, 114, 105, 110, 103, 34, 62, 60, 47, 83,
        105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105,
        109, 112, 108, 101, 70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61,
        34, 101, 110, 100, 34, 32, 116, 121, 112, 101, 61, 34, 115, 116, 114,
        105, 110, 103, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105,
        101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101,
        108, 100, 32, 110, 97, 109, 101, 61, 34, 97, 108, 116, 105, 116, 117,
        100, 101, 77, 111, 100, 101, 34, 32, 116, 121, 112, 101, 61, 34, 115,
        116, 114, 105, 110, 103, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101,
        70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70,
        105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 116, 101, 115, 115,
        101, 108, 108, 97, 116, 101, 34, 32, 116, 121, 112, 101, 61, 34, 105,
        110, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101,
        108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108,
        100, 32, 110, 97, 109, 101, 61, 34, 101, 120, 116, 114, 117, 100, 101,
        34, 32, 116, 121, 112, 101, 61, 34, 105, 110, 116, 34, 62, 60, 47, 83,
        105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105,
        109, 112, 108, 101, 70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61,
        34, 118, 105, 115, 105, 98, 105, 108, 105, 116, 121, 34, 32, 116, 121,
        112, 101, 61, 34, 105, 110, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108,
        101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101,
        70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 100, 114, 97,
        119, 79, 114, 100, 101, 114, 34, 32, 116, 121, 112, 101, 61, 34, 105,
        110, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101,
        108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108,
        100, 32, 110, 97, 109, 101, 61, 34, 105, 99, 111, 110, 34, 32, 116, 121,
        112, 101, 61, 34, 115, 116, 114, 105, 110, 103, 34, 62, 60, 47, 83, 105,
        109, 112, 108, 101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109,
        112, 108, 101, 70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34,
        86, 101, 114, 115, 105, 111, 110, 34, 32, 116, 121, 112, 101, 61, 34,
        115, 116, 114, 105, 110, 103, 34, 62, 60, 47, 83, 105, 109, 112, 108,
        101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101,
        70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 71, 80, 83, 95,
        83, 116, 97, 116, 117, 115, 34, 32, 116, 121, 112, 101, 61, 34, 105,
        110, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101,
        108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108,
        100, 32, 110, 97, 109, 101, 61, 34, 83, 116, 97, 116, 117, 115, 95, 84,
        120, 116, 34, 32, 116, 121, 112, 101, 61, 34, 115, 116, 114, 105, 110,
        103, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108,
        100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100,
        32, 110, 97, 109, 101, 61, 34, 83, 119, 97, 116, 104, 34, 32, 116, 121,
        112, 101, 61, 34, 105, 110, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108,
        101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101,
        70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 72, 101, 105,
        103, 104, 116, 34, 32, 116, 121, 112, 101, 61, 34, 102, 108, 111, 97,
        116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108,
        100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100,
        32, 110, 97, 109, 101, 61, 34, 68, 97, 116, 101, 67, 108, 111, 115, 101,
        100, 34, 32, 116, 121, 112, 101, 61, 34, 115, 116, 114, 105, 110, 103,
        34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 62,
        10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 32, 110,
        97, 109, 101, 61, 34, 84, 105, 109, 101, 67, 108, 111, 115, 101, 100,
        34, 32, 116, 121, 112, 101, 61, 34, 115, 116, 114, 105, 110, 103, 34,
        62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 62, 10,
        9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 32, 110, 97,
        109, 101, 61, 34, 65, 112, 112, 108, 100, 82, 97, 116, 101, 34, 32, 116,
        121, 112, 101, 61, 34, 102, 108, 111, 97, 116, 34, 62, 60, 47, 83, 105,
        109, 112, 108, 101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109,
        112, 108, 101, 70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34,
        77, 111, 105, 115, 116, 117, 114, 101, 34, 32, 116, 121, 112, 101, 61,
        34, 102, 108, 111, 97, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101,
        70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70,
        105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 77, 97, 116, 101,
        114, 105, 97, 108, 34, 32, 116, 121, 112, 101, 61, 34, 115, 116, 114,
        105, 110, 103, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105,
        101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101,
        108, 100, 32, 110, 97, 109, 101, 61, 34, 77, 97, 116, 101, 114, 105, 97,
        108, 73, 68, 34, 32, 116, 121, 112, 101, 61, 34, 105, 110, 116, 34, 62,
        60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 62, 10, 9,
        60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 32, 110, 97,
        109, 101, 61, 34, 83, 112, 101, 101, 100, 34, 32, 116, 121, 112, 101,
        61, 34, 102, 108, 111, 97, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108,
        101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101,
        70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 88, 84, 69, 34,
        32, 116, 121, 112, 101, 61, 34, 102, 108, 111, 97, 116, 34, 62, 60, 47,
        83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83,
        105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 32, 110, 97, 109, 101,
        61, 34, 65, 112, 112, 84, 121, 112, 101, 34, 32, 116, 121, 112, 101, 61,
        34, 105, 110, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105,
        101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101,
        108, 100, 32, 110, 97, 109, 101, 61, 34, 78, 68, 86, 73, 34, 32, 116,
        121, 112, 101, 61, 34, 102, 108, 111, 97, 116, 34, 62, 60, 47, 83, 105,
        109, 112, 108, 101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109,
        112, 108, 101, 70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34,
        80, 111, 112, 117, 108, 97, 116, 105, 111, 110, 34, 32, 116, 121, 112,
        101, 61, 34, 102, 108, 111, 97, 116, 34, 62, 60, 47, 83, 105, 109, 112,
        108, 101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108,
        101, 70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 83, 105,
        110, 103, 117, 108, 97, 116, 110, 34, 32, 116, 121, 112, 101, 61, 34,
        102, 108, 111, 97, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70,
        105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105,
        101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 83, 107, 105, 112, 115,
        95, 80, 101, 114, 99, 34, 32, 116, 121, 112, 101, 61, 34, 102, 108, 111,
        97, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108,
        100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100,
        32, 110, 97, 109, 101, 61, 34, 77, 117, 108, 116, 115, 95, 80, 101, 114,
        99, 34, 32, 116, 121, 112, 101, 61, 34, 102, 108, 111, 97, 116, 34, 62,
        60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 62, 10, 9,
        60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100, 32, 110, 97,
        109, 101, 61, 34, 86, 111, 108, 117, 109, 101, 34, 32, 116, 121, 112,
        101, 61, 34, 102, 108, 111, 97, 116, 34, 62, 60, 47, 83, 105, 109, 112,
        108, 101, 70, 105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108,
        101, 70, 105, 101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 71, 114, 97,
        105, 110, 95, 70, 108, 111, 119, 34, 32, 116, 121, 112, 101, 61, 34,
        102, 108, 111, 97, 116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70,
        105, 101, 108, 100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105,
        101, 108, 100, 32, 110, 97, 109, 101, 61, 34, 82, 97, 119, 95, 109, 111,
        105, 115, 116, 34, 32, 116, 121, 112, 101, 61, 34, 102, 108, 111, 97,
        116, 34, 62, 60, 47, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108,
        100, 62, 10, 9, 60, 83, 105, 109, 112, 108, 101, 70, 105, 101, 108, 100,
        32, 110, 97, 109, 101, 61, 34, 84, 109, 112, 114, 34, 32, 116, 121, 112,
        101, 61, 34, 102, 108, 111, 97, 116, 34, 62, 60, 47, 83, 105, 109, 112,
        108, 101, 70, 105, 101, 108, 100, 62, 10, 60, 47, 83, 99, 104, 101, 109,
        97, 62, 10, 60, 70, 111, 108, 100, 101, 114, 62, 60, 110, 97, 109, 101,
        62, 116, 101, 115, 116, 101, 49, 60, 47, 110, 97, 109, 101, 62, 10, 32,
        32, 60, 80, 108, 97, 99, 101, 109, 97, 114, 107, 62, 10, 9, 60, 83, 116,
        121, 108, 101, 62, 60, 76, 105, 110, 101, 83, 116, 121, 108, 101, 62,
        60, 99, 111, 108, 111, 114, 62, 102, 102, 48, 48, 48, 48, 102, 102, 60,
        47, 99, 111, 108, 111, 114, 62, 60, 47, 76, 105, 110, 101, 83, 116, 121,
        108, 101, 62, 60, 80, 111, 108, 121, 83, 116, 121, 108, 101, 62, 60,
        102, 105, 108, 108, 62, 48, 60, 47, 102, 105, 108, 108, 62, 60, 47, 80,
        111, 108, 121, 83, 116, 121, 108, 101, 62, 60, 47, 83, 116, 121, 108,
        101, 62, 10, 9, 60, 69, 120, 116, 101, 110, 100, 101, 100, 68, 97, 116,
        97, 62, 60, 83, 99, 104, 101, 109, 97, 68, 97, 116, 97, 32, 115, 99,
        104, 101, 109, 97, 85, 114, 108, 61, 34, 35, 116, 101, 115, 116, 101,
        49, 34, 62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97,
        32, 110, 97, 109, 101, 61, 34, 116, 101, 115, 115, 101, 108, 108, 97,
        116, 101, 34, 62, 45, 49, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97,
        116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97,
        32, 110, 97, 109, 101, 61, 34, 101, 120, 116, 114, 117, 100, 101, 34,
        62, 48, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9,
        9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109,
        101, 61, 34, 118, 105, 115, 105, 98, 105, 108, 105, 116, 121, 34, 62,
        45, 49, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9,
        9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109,
        101, 61, 34, 86, 101, 114, 115, 105, 111, 110, 34, 62, 55, 46, 56, 48,
        46, 48, 48, 50, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97,
        62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110,
        97, 109, 101, 61, 34, 71, 80, 83, 95, 83, 116, 97, 116, 117, 115, 34,
        62, 50, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9,
        9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109,
        101, 61, 34, 83, 116, 97, 116, 117, 115, 95, 84, 120, 116, 34, 62, 68,
        71, 80, 83, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 62,
        10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110, 97,
        109, 101, 61, 34, 83, 119, 97, 116, 104, 34, 62, 48, 60, 47, 83, 105,
        109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105, 109,
        112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 72, 101,
        105, 103, 104, 116, 34, 62, 51, 50, 51, 46, 55, 53, 57, 60, 47, 83, 105,
        109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105, 109,
        112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 68, 97,
        116, 101, 67, 108, 111, 115, 101, 100, 34, 62, 50, 48, 50, 52, 47, 48,
        51, 47, 50, 50, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97,
        62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110,
        97, 109, 101, 61, 34, 84, 105, 109, 101, 67, 108, 111, 115, 101, 100,
        34, 62, 48, 48, 58, 49, 56, 58, 49, 52, 112, 109, 60, 47, 83, 105, 109,
        112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112,
        108, 101, 68, 97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 65, 112, 112,
        108, 100, 82, 97, 116, 101, 34, 62, 48, 60, 47, 83, 105, 109, 112, 108,
        101, 68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68,
        97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 77, 111, 105, 115, 116, 117,
        114, 101, 34, 62, 48, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116,
        97, 62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32,
        110, 97, 109, 101, 61, 34, 77, 97, 116, 101, 114, 105, 97, 108, 34, 62,
        60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 9, 60,
        83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109, 101, 61,
        34, 77, 97, 116, 101, 114, 105, 97, 108, 73, 68, 34, 62, 48, 60, 47, 83,
        105, 109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105,
        109, 112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 83,
        112, 101, 101, 100, 34, 62, 50, 46, 52, 53, 50, 60, 47, 83, 105, 109,
        112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112,
        108, 101, 68, 97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 88, 84, 69,
        34, 62, 48, 46, 48, 49, 53, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97,
        116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97,
        32, 110, 97, 109, 101, 61, 34, 65, 112, 112, 84, 121, 112, 101, 34, 62,
        49, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 9,
        60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109, 101,
        61, 34, 78, 68, 86, 73, 34, 62, 48, 60, 47, 83, 105, 109, 112, 108, 101,
        68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97,
        116, 97, 32, 110, 97, 109, 101, 61, 34, 80, 111, 112, 117, 108, 97, 116,
        105, 111, 110, 34, 62, 48, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97,
        116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97,
        32, 110, 97, 109, 101, 61, 34, 83, 105, 110, 103, 117, 108, 97, 116,
        110, 34, 62, 49, 48, 48, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97,
        116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97,
        32, 110, 97, 109, 101, 61, 34, 83, 107, 105, 112, 115, 95, 80, 101, 114,
        99, 34, 62, 48, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97,
        62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110,
        97, 109, 101, 61, 34, 77, 117, 108, 116, 115, 95, 80, 101, 114, 99, 34,
        62, 48, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9,
        9, 60, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109,
        101, 61, 34, 86, 111, 108, 117, 109, 101, 34, 62, 48, 60, 47, 83, 105,
        109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105, 109,
        112, 108, 101, 68, 97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 71, 114,
        97, 105, 110, 95, 70, 108, 111, 119, 34, 62, 48, 60, 47, 83, 105, 109,
        112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112,
        108, 101, 68, 97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 82, 97, 119,
        95, 109, 111, 105, 115, 116, 34, 62, 48, 60, 47, 83, 105, 109, 112, 108,
        101, 68, 97, 116, 97, 62, 10, 9, 9, 60, 83, 105, 109, 112, 108, 101, 68,
        97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 84, 109, 112, 114, 34, 62,
        48, 60, 47, 83, 105, 109, 112, 108, 101, 68, 97, 116, 97, 62, 10, 9, 60,
        47, 83, 99, 104, 101, 109, 97, 68, 97, 116, 97, 62, 60, 47, 69, 120,
        116, 101, 110, 100, 101, 100, 68, 97, 116, 97, 62, 10, 32, 32, 32, 32,
        32, 32, 60, 80, 111, 108, 121, 103, 111, 110, 62, 60, 111, 117, 116,
        101, 114, 66, 111, 117, 110, 100, 97, 114, 121, 73, 115, 62, 60, 76,
        105, 110, 101, 97, 114, 82, 105, 110, 103, 62, 60, 99, 111, 111, 114,
        100, 105, 110, 97, 116, 101, 115, 62, 45, 53, 51, 46, 55, 53, 56, 56,
        50, 53, 52, 53, 55, 54, 57, 55, 53, 44, 45, 50, 50, 46, 52, 51, 51, 53,
        54, 55, 57, 48, 56, 50, 48, 52, 54, 44, 48, 32, 45, 53, 51, 46, 55, 53,
        56, 56, 55, 55, 48, 54, 51, 53, 55, 52, 49, 44, 45, 50, 50, 46, 52, 51,
        51, 54, 52, 48, 50, 52, 53, 50, 57, 50, 49, 44, 48, 32, 45, 53, 51, 46,
        55, 53, 56, 57, 50, 49, 54, 56, 50, 56, 53, 54, 57, 44, 45, 50, 50, 46,
        52, 51, 51, 55, 49, 52, 48, 54, 52, 50, 50, 48, 49, 44, 48, 32, 45, 53,
        51, 46, 55, 53, 56, 57, 53, 51, 52, 48, 50, 53, 52, 57, 52, 44, 45, 50,
        50, 46, 52, 51, 51, 55, 54, 57, 50, 57, 50, 57, 54, 54, 52, 44, 48, 32,
        45, 53, 51, 46, 55, 53, 56, 57, 55, 55, 49, 50, 53, 49, 49, 49, 54, 44,
        45, 50, 50, 46, 52, 51, 51, 56, 49, 50, 49, 53, 49, 57, 54, 57, 55, 44,
        48, 32, 45, 53, 51, 46, 55, 53, 57, 48, 48, 55, 52, 53, 54, 57, 51, 52,
        56, 44, 45, 50, 50, 46, 52, 51, 51, 56, 54, 51, 51, 57, 54, 53, 49, 57,
        51, 44, 48, 32, 45, 53, 51, 46, 55, 53, 57, 48, 50, 52, 57, 48, 52, 54,
        49, 54, 52, 44, 45, 50, 50, 46, 52, 51, 51, 56, 57, 53, 54, 53, 54, 56,
        51, 56, 44, 48, 32, 45, 53, 51, 46, 55, 53, 56, 56, 55, 54, 48, 54, 56,
        51, 50, 50, 50, 44, 45, 50, 50, 46, 52, 51, 51, 57, 53, 54, 57, 55, 53,
        50, 49, 54, 55, 44, 48, 32, 45, 53, 51, 46, 55, 53, 56, 56, 54, 50, 55,
        57, 52, 52, 51, 55, 51, 44, 45, 50, 50, 46, 52, 51, 51, 57, 51, 50, 56,
        49, 50, 56, 52, 57, 54, 44, 48, 32, 45, 53, 51, 46, 55, 53, 56, 56, 51,
        53, 57, 57, 56, 56, 49, 57, 57, 44, 45, 50, 50, 46, 52, 51, 51, 56, 56,
        55, 53, 57, 55, 52, 50, 57, 50, 44, 48, 32, 45, 53, 51, 46, 55, 53, 56,
        56, 49, 49, 55, 49, 51, 49, 54, 49, 53, 44, 45, 50, 50, 46, 52, 51, 51,
        56, 52, 51, 56, 50, 48, 54, 52, 54, 49, 44, 48, 32, 45, 53, 51, 46, 55,
        53, 56, 55, 55, 57, 50, 57, 57, 51, 49, 53, 50, 44, 45, 50, 50, 46, 52,
        51, 51, 55, 56, 55, 52, 51, 57, 53, 55, 44, 48, 32, 45, 53, 51, 46, 55,
        53, 56, 55, 51, 55, 54, 54, 55, 57, 52, 49, 55, 44, 45, 50, 50, 46, 52,
        51, 51, 55, 49, 56, 52, 50, 49, 55, 48, 50, 49, 44, 48, 32, 45, 53, 51,
        46, 55, 53, 56, 54, 57, 51, 55, 53, 52, 53, 48, 51, 52, 44, 45, 50, 50,
        46, 52, 51, 51, 54, 53, 54, 56, 54, 55, 56, 57, 54, 52, 44, 48, 32, 45,
        53, 51, 46, 55, 53, 56, 56, 50, 53, 52, 53, 55, 54, 57, 55, 53, 44, 45,
        50, 50, 46, 52, 51, 51, 53, 54, 55, 57, 48, 56, 50, 48, 52, 54, 44, 48,
        60, 47, 99, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 62, 60, 47,
        76, 105, 110, 101, 97, 114, 82, 105, 110, 103, 62, 60, 47, 111, 117,
        116, 101, 114, 66, 111, 117, 110, 100, 97, 114, 121, 73, 115, 62, 60,
        47, 80, 111, 108, 121, 103, 111, 110, 62, 10, 32, 32, 60, 47, 80, 108,
        97, 99, 101, 109, 97, 114, 107, 62, 10, 60, 47, 70, 111, 108, 100, 101,
        114, 62, 10, 60, 47, 68, 111, 99, 117, 109, 101, 110, 116, 62, 60, 47,
        107, 109, 108, 62, 10,
      ]);
      const files: Array<
        Partial<{ file: Express.Multer.File; typeId: number }>
      > = [
        {
          file: {
            fieldname: 'file',
            originalname: 'test-file.kml',
            encoding: '7bit',
            mimetype: 'text/plain',
            size: 10240000,
            buffer: Buffer.copyBytesFrom(u16, 0, 4154),
            stream: new Readable(),
            destination: '',
            filename: '',
            path: '',
          },
          typeId: ApplicationDocumentType.KML,
        },
      ];

      const request: ApplicationDocumentRequest = {
        files,
        applicationId: 1,
      };

      const repositorySpy = {
        create: jest.spyOn(repository, 'create').mockResolvedValue({
          id: 1,
          path: filePath,
          originalName: 'test-file.kml',
          data: {},
          type: {
            id: ApplicationDocumentType.KML,
            description: 'KML',
            active: true,
          },
        }),
        createMany: jest
          .spyOn(arearepository, 'createMany')
          .mockResolvedValue(1),
      };

      const awsServiceSpy = {
        uploadFile: jest.spyOn(awsService, 'uploadFile'),
        buildUrl: jest.spyOn(awsService, 'buildPath').mockReturnValue(filePath),
      };

      const applicationDocumentServiceSpy = {
        getBucketByDocumentType: jest
          .spyOn(applicationDocumentService, 'getBucketByDocumentType')
          .mockReturnValue('bucket'),
        generateFileName: jest
          .spyOn(applicationDocumentService, 'generateFileName')
          .mockReturnValue('key.file'),
      };

      // Act
      const result = await useCase.execute(request);

      // Assert
      expect(awsServiceSpy.buildUrl).toHaveBeenCalled();
      expect(awsServiceSpy.uploadFile).toHaveBeenCalled();
      expect(
        applicationDocumentServiceSpy.getBucketByDocumentType,
      ).toHaveBeenCalledWith(ApplicationDocumentType.KML);
      expect(
        applicationDocumentServiceSpy.generateFileName,
      ).toHaveBeenCalledWith(files[0].file);
      expect(repositorySpy.createMany).toHaveBeenCalled();
      expect(repositorySpy.createMany).toHaveBeenCalledWith(
        [
          '{"type":"Polygon","coordinates":[[[-53.7588254576975,-22.4335679082046,0],[-53.7588770635741,-22.4336402452921,0],[-53.7589216828569,-22.4337140642201,0],[-53.7589534025494,-22.4337692929664,0],[-53.7589771251116,-22.4338121519697,0],[-53.7590074569348,-22.4338633965193,0],[-53.7590249046164,-22.433895656838,0],[-53.7588760683222,-22.4339569752167,0],[-53.7588627944373,-22.4339328128496,0],[-53.7588359988199,-22.4338875974292,0],[-53.7588117131615,-22.4338438206461,0],[-53.7587792993152,-22.43378743957,0],[-53.7587376679417,-22.4337184217021,0],[-53.7586937545034,-22.4336568678964,0],[-53.7588254576975,-22.4335679082046,0]]]}',
        ],
        '',
        1,
      );
      expect(repositorySpy.create).toHaveBeenCalledWith({
        path: filePath,
        originalName: 'test-file.kml',
        data: [],
        applicationId: 1,
        typeId: ApplicationDocumentType.KML,
      });

      expect(result).toEqual([
        {
          id: 1,
          path: filePath,
          originalName: 'test-file.kml',
          data: {},
          type: {
            id: ApplicationDocumentType.KML,
            description: 'KML',
            active: true,
          },
        },
      ]);
    });
  });
});
